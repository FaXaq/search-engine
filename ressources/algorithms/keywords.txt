Etapes : 

- Strip punctuation, special caracters, etc.
- Split on Spaces
- Strip "simple" words
- Loop (if word doesn't exist, create it, else increment it)

Algo :

E/S : Page : Page


    structures utilisées
/*-------------------------------
STRUCTURE Page
DEBUTSTRUCTURE
    ID : ENTIER
    Text : CHAINE
    Title : CHAINE
    Url : CHAINE
    Keywords[1...o] : Keyword
FINSTRUCTURE

STRUCTURE Keyword
DEBUTSTRUCTURE
    ID : ENTIER
    Word : CHAINE
    Value : ENTIER
FINSTRUCTURE
--------------------------------*/

FONCTION keywords(E/S Page : Page)
VAR
DEBUT
    extract_datas(Page)
    Page.Keywords = sort(Page.Keywords)
FIN

FONCTION extract_datas (E/S Page : Page)
VAR
DEBUT
    extract_keywords(parse("h1"), "h1", Page)
    extract_keywords(parse("h2"), "h2", Page)
    extract_keywords(parse("h3"), "h3", Page)
    extract_keywords(parse("h4"), "h4", Page)
    extract_keywords(parse("h5"), "h5", Page)
    extract_keywords(parse("h6"), "h6", Page)
    extract_keywords(parse("meta"), "meta", Page)
    extract_keywords(parse("description"), "description", Page)
    extract_keywords(parse("italic"), "italic", Page)
    extract_kewords(parse("bold"), "bold", Page)
    extract_keywords(parse("p"), "p", Page)
    extract_keywords(parse("strong"), "strong", Page)
FIN

FONCTION extract_keywords (E Content : String, E Type : String, E/S Page : Page)
VAR
i<-1 : ENTIER
words[1...r] : Keyword
DEBUT
    words = split_string(Content, ' ', value_of_type(Type))
    POUR i ALLANT DE 1 A r AU PAS DE 1 //tableau words
        o++ //on ajoute une case (push)
        Page.Keywords[o].Word=remove_punctuation(words[i].Words)
        Page.Keywords[o].Value+=words[i].Value
    FINPOUR
FIN

FONCTION value_of_type(E Type : CHAINE, S Value : ENTIER)
VAR
    Value : ENTIER //déclaration des valeurs des types parsés
DEBUT
    SI (Type == "meta")
        Value = 10
    FINSI
    SINON SI (Type == "h1" || Type == "description" )
        Value = 7
    FINSI
    SINON SI (Type == "strong")
        Value = 6
    FINSI
    SINON SI (Type == "h2" || Type == "italic" || Type == "bold")
        Value = 5
    FINSI
    SINON SI (Type == "h3")
        Value = 4
    FINSI
    SINON SI (Type == "h4" || Type == "h5")
        Value = 3
    FINSI
    SINON SI (Type == "h6")
        Value = 2
    FINSI
    SINON
        Value = 1
    FINSI
    RETURN Value
FIN

FONCTION removePunctuation (E/S Content : CHAINE)
VAR
i<-1 : ENTIER //passer par un string::iterator
DEBUT
    POUR i ALLANT DE 1 A Content.length() AU PAS DE 1
        SI (Content[i] == "," ||
            Content[i] == ";" || 
            Content[i] == ":" ||
            Content[i] == "!" || 
            Content[i] == "?" ||
            Content[i] == "." || //on supprime les caractères spéciaux communs
            Content[i] == ")" ||
            Content[i] == "(" || 
            Content[i] == "\"" ||
            Content[i] == "\'" || 
            Content[i] == "}" ||
            Content[i] == "{" || 
            Content[i] == "]" ||
            Content[i] == "[" || 
            Content[i] == "§" || 
            Content[i] == "$" || 
            Content[i] == "£" || 
            Content[i] == "€" || 
            Content[i] == "<" || 
            Content[i] == ">" || 
            Content[i] == "\/" || 
            Content[i] == "\\" || 
            Content[i] == "_")
        ALORS
            Content.erase(i)
        FINSI
    FINPOUR
    RETURN Content
FIN

FONCTION simple_words (E Word : String, S simple : BOOLEAN)
VAR
    simple<-false : BOOLEAN
DEBUT
    SI (Word == "le" || Word == "la")
        simple = true
    FINSI
    RETURN simple
FIN

FONCTION split_string (E/S Content : CHAINE, S tableau[1...q] : Keyword, E delim : CHAR, E Value : ENTIER)
VAR
    ss(Content) : STRINGSTREAM
    item : CHAINE
    tableau[1...q] : CHAINE
    i<-1 : ENTIER
DEBUT
    TANT QUE (getline(ss, item, delim)) // ici on utilise une fonction de base de la classe std
    FAIRE   
        tableau[i] = item
        tableau[i].Value = Value
        i+1
    FINTANTQUE
    RETURN tableau
FIN

FONCTION sort (E [1...o]Keywords : Keyword, S [1...p]Keywords : Keyword)
VAR
i<-1 ENTIER
j<-1 ENTIER
test<-false BOOLEAN
DEBUT
    POUR i ALLANT DE 1 A o AU PAS DE 1
        POUR j ALLANT DE i A o AU PAS DE 1
            SI (Keywords[i].Word == Keywords[j].Word)
                Keywords[i].Value += Keywords[j].Value
                Keywords[j].delete()
            FINSI
        FINPOUR
    FINPOUR
FIN
